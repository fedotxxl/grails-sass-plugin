h1. Resources mode
Данный плагин может работать в двух режимах - ResourcesMode и DiskMode. Каждый из этих режимов имеет свои преимущества и недостатки.
{note}
Для серьезных проектов мы советуем вам использовать DiskMode
{note}

h2. Особенности
ResourcesMode позволяет данному плагину интегрироваться с [Resources|http://grails.org/plugin/resources] плагином.
В таком режиме физически файлы CSS не создаются. Вместо этого в момент запуска приложения Resources плагин, используя данный плагин,
компилирует SASS файлы и сохраняет их в памяти.

h2. Переключение плагина в ResourcesMode
По-умолчанию ResourcesMode выключен. Чтобы включить его добавьте следующую настройку в Config.groovy:
{code}
plugin.scssCompiler.resourcesMode = true
{code}

h2. Подключение SASS файла
Если плагин переключен в ResourcesMode, то в *Resources.groovy вы можете ссылаться непосредственно на *.sass файл:
{code}
resource url: 'scss/app.scss', attrs: [type: 'css']
resource url: [plugin: 'common', dir: 'scss', file: 'bootstrap.scss'], attrs: [type: 'css']
{code}
Важно помнить:
* Разрешение файла должно быть .sass/.scss
* Необходимо добавить параметр attrs: [type: 'css']
* Для файлов из модуля/плагина используйте Map API url: [plugin: 'xxx', dir: 'yyy', file: 'zzz.scss']

h2. Импорт файлов из текущего модуля
Ваши SASS файлы могут импортировать в себя другие файлы (@import). Чтобы импортировать файлы, находящиеся в текущем модуле, просто укажите
путь до импортируемый файлов относительно текущего файла.

h2. Импорт файлов из стороннего модуля
Исли вы хотите импортировать файл из другого модуля (например, из плагина), в файле Config.groovy укажите:
{code}
plugin.scssCompiler.resources.modules.folder.source = ['pluginName': 'scss_path']
{code}
где:
* pluginName - имя плагина без версии, из которого вы собираетесь импортировать SASS файлы
* scss_path - корневая папка в 'web-app' данного плагина, в которой расположены SASS файлы
В директиве @import укажите путь до импортируемого файла, относительно папки scss_path
{note}
Понятие SASS Load Paths
Когда вы используете директиву @import компилятору необходимо знать относительно какой папки искать импортированные файлы. SASS Load Paths - список всех папок,
относительно которых компилятор попытается найти импортированные файлы. По-умолчанию плагин добавляет в SASS Load Paths папку, в которой расположен компилируемый файл.
Директива "plugin.scssCompiler.resources.modules.folder.source" позволяет добавить в SASS Load Paths папки из других плагинов. Таким образом настройка
{code}
plugin.scssCompiler.resources.modules.folder.source = ['pluginName': 'scss_path']
{code}
добавит в SASS Load Paths папку /web-app/scss_path из плагина pluginName
{note}

h2. Поведение при неудачной компиляции
По-умолчанию при неудачной компиляции плагин переиминует файл в "${sourceName}.FAILED.scss". Если вы хотите, чтобы плагин генерировал исключение, укажите в Config.groovy:
{code}
resources.exceptionOnFailedCompilation = true
{code}

h2. Преимущества и недостатки ResourcesMode
На наш взгляд ResourcesMode имеет следующие преимущества:
* Простота подключения и использования
* Отсутствие лишних файлов в проекте
и следующие недостатки
* По каким-либо причинам SASS файл может быть не скомпилирован. В этом случае ваш сервис будет некорретно отображаться, что может привести к нежелательным последствиям
* Для компиляции SASS файлов требуются jRuby и Ruby файлы. Поэтому если вы компилируете SASS файлы, используя ResourcesMode, мы вынуждены добавить данные файлы в *.war
* Замедляет запуск вашего приложения
* Замедляет разработку приложения, т.к. каждый раз приходится перекомпилировать все SASS файлы

Из-за описанных выше недостатков в своих проектах мы используем DiskMode.
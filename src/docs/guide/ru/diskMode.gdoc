h1. Disk Mode
Данный плагин может работать в двух режимах - DiskMode (далее DM) и ResourcesMode (далее RM). Каждый из этих режимов имеет свои преимущества и недостатки.
{note}
Для серьезных проектов мы советуем вам использовать DM
{note}

h2. Особенности
В режиме DM плагин компилирует SASS файлы и сохраняет их на диск. При работе с Resources плагином вы указываете ссылки на скомпилированные CSS файлы

h2. Переключение плагина в DiskMode
По-умолчанию DiskMode включен - от вас не требуется никаких действий. В тоже время вы можете явно включить DM. Для этого добавьте следующую настройку в Config.groovy:
{code}
plugin.scssCompiler.mode = 'disk'
{code}

h2. Компиляция SASS файлов
В режиме DM плагин отбирает все *.sass/*.scss файлы из проекта и модулей (inline плагинов),
компилирует их в CSS файлы и сохраняет скомпилированные файлы в target папку. Для определения target папки используется настройка `plugin.scssCompiler.disk.folders`:
{code}
plugin.scssCompiler.disk.folders = ["scss_source": "scss_target"]
{code}
В данном примере "scss_source" - папка, в которой распложенны файлы SASS, а "scss_target" - папка в которую необходимо положить скомпилированные CSS файлы.
Плагин возьемет из папки "scss_source" все файлы с разрешением *.sass/*.scss, скомпилирует их, и сохранит полученный результат в папке "scss_target".
К исходному имени будет добавлено ".css". Структура подпапок будет сохранена. Таким образом, файл "/web-app/scss_source/support/modal.scss" будет скомпилирован
в "/web-app/scss_target/support/modal.scss.css".

h3. Использование SASS файлов в Resources плагине
Если плагин работает в DM, то в файле *Resources.groovy вы должны ссылаться на уже скомпилированные *.css файлы, например:
{code}
resource url: 'scss_target/app.scss.css'
{code}

h2. Ускорение процесса компиляции SASS файлов
{note}
Очень рекомендуем внимательно ознакомиться с данным разделом, чтобы вы могли ускорить процесс компиляции ваших SASS файлов
{note}
По-умолчанию плагин перекомпилирует SASS файлы при каждом запуске приложения. Это может быть довольно долго и накладно. Чтобы перекомпилировать только измененные файлы добавьте в Config.groovy:
{code}
plugin.scssCompiler.disk.clearTargetFolder = false
plugin.scssCompiler.disk.checkLastModifiedBeforeCompile = true
{code}
При наличии уже скомпилированного SASS файла плагин будет проверять необходимость перекомпизяции, используя даты изменения файлов.
Если дата изменения скомпилированного файла больше даты изменения исходного файла, то данный файл будет считаться уже скомпилированным (`up to date`) и плагин перейдет к компиляции следующего файла.
Это значительно ускоряет процесс запуска приложения, но так же добавляет вероятность ошибки, например, если вы вручную поменяли скомпилированный файл.
Другой вариант ускорения запуска приложения - сделать процесс компиляции SASS файлов асинхронным, используя параметр `disk.asyncStartup`:
{code}
plugin.scssCompiler.disk.asyncStartup = true
{code}
В этом случае компилляция SASS файлов будет происходить в отдельном потоке, параллельно с запуском приложения, что является приемлемы решением в процессе разработки приложения (grails run-app)
{note}
Не используйте параметр `plugin.scssCompiler.disk.asyncStartup = true` при сборке war файла (grails war / grails run-war)
{note}

h2. Когда компилируются SASS файлы?
h3. Компиляция при исполнении Grails команд
Если плагин включен в режиме DM, то SASS файлы должны быть скомпилированы до того, как приложение запуститься. По нашему мнению это имеет смысл делать при исполнении команд:
* run-app
* run-war
* war
К сожалению, Grails не позволяет получить название исполняемой в данный момент команды. Поэтому компиляция SASS файлов запускается на каждую команду Grails. Это не должно привести
к значительным задержкам, т.к. плагин старается не перекомпилировать неизмененные файлы. В тоже время вы можете отключить автоматическую компиляцию SASS файлов при исполнении команд Grails.
Для этого добавьте в Config.groovy:
{code}
plugin.scssCompiler.disk.compileOnAnyCommand = false
{code}
Теперь, если вы хотите, чтобы при исполнении данной Grails команды были скомпилированы SASS файлы, добавьте параметр "-Dscss.compile=true". Например:
{code}
grails war -Dscss.compile=true
{code}
h3. scss-compile
Возможно вам потребуется только скомпилировать SASS файлы (а не собирать все приложение, например). В этом случае используйте команду "scss-compile":
{code}
grails scss-compile
{code}

h2. Исключение файлов плагина из собираемого WAR
По-умолчанию плагин подключается в BuildConfig.groovy:
{code}
plugins {
    compile ":scss-compile:0.1.7.20"
}
{code}
В таком случае в собираемый WAR файл попадут все файлы плагина - jRuby, *.rb и т.д. Если вы используете плагин в режиме DM, то компиляция SASS файлов происходит при сборке проекта - файлы плагина вам не нужны в WAR'е.
Поэтому подключите плагин в BuildConfig.groovy следующим образом:
{code}
plugins {
    test ":scss-compile:0.1.7.20"
}
{code}
При таком подключении плагина DM будет корретно работать, а файлы плагина не будут скопированы в WAR файл.

h2. Преимущества и недостатки DiskMode
На наш взгляд DM имеет следующие преимущества:
* Надежность - компиляция SASS файлов происходит в процесее сборки проекта, а не впроцессе его запуска. Ошибки на данном этапе могут быть безболезненно устранены
* Быстрота - мы стараемся не перекомпилировать файлы, которые не менялись. Поэтому при повторном запуске проекта будут скомпилированы только измененные SASS файлы

и следующие недостатки
* Наличие лишних файлов (*.css) в проекте

Недостатки DM для нас не являются критичными. В своей работе мы используем именно DM